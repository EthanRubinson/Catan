####################
# Catan Design Doc #
####################

State representaiton
----------------------

Predefined state structure:

					state =						(board				player list				turn			next)				

												/												\				\
(map	structures		deck		discard		robber)				|							 \			(color				request)
|		|				/			/			/					|							  \				|					\____
|		|	(cards)		(card list)		(piece)		(color		hand		trophies)	  		   |  [BLUE | RED | ORANGE | WHITE]		 |
|		|														 |				|				   |								 	 |
|		|														 |	(knights long_road,large_army) |								 	 |
														(inventory		cards)					   |  [   INITREQUEST |   ROBBERREQUST | DISCOUNTREQUEST | 											  |				TRADEREQUEST | 	ACTIONREQUEST	]
|			\																					   |
|			 \																					   |
|			  \																					   |
|				\																				   |
|				(intersection		road list)													   |
|										|														   |
|										|												{
| 										(color lane)									active : color 			   ** The color of the active player **
(hex list :(terrain	*roll)	part : (line ratio resource) list)
																						dicerolled : roll option   ** Some roll] if dice were rolled **							   ** this turn 		             **

  																						cardplayed : bool

  																						cardsbought : cards        ** Any cards a player buys during **
  																												   ** their turn are stored in       **
  																												   ** turn.cardsbought and are only  **
  																												   ** transfered to the player's     **
  																												   ** hand at the END of the turn 	 **

																					  	tradesmade : int            ** Number of trades made this turn **

																					  	pendingtrade : trade option ** A trade that's just been        **
																					  								** proposed **  but not yet        **
																					  								** accepted/rejected.              **
																					  	}



Modified game structure:
------------------------

game type = 			(state 			game_info)
											|
								{
  								  playerNum :int
								  playerPointList : int list
								}

Additional information will be stored as necessary, however the modular design of the game type allows for non-conflicting methods to be implemented without knowledge of the internal structure of game_info



Basic Catan Design
-------------------
MVC structure

M - Model 		-- The game state
V - View  		-- The actual presentation of the board, this is written already
C - Controller 	-- What we are writing, handle the game moves and adjust the game state


Controller Constrution:
------------------------
- Fully modularized, mutually exclusive pieces of code can be written independantly and linked at the end
- Method/Module for handling each type of move
- Handle trades
- Handle randomizing moves
- etc.

